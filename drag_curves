#!/usr/bin/env python3

import argparse
import matplotlib.pyplot as plt
from musica import load_single_trace


class DraggablePattern:
    def __init__(self, obj):
        self.obj = obj
        self.press = None

    def event(self, event):
        contains, attrd = self.obj.contains(event)
        if contains:
            print(f"{self.obj=} {event=}")

    def on_press(self, event):
        if event.inaxes != self.obj.axes:
            return
        contains, attrd = self.obj.contains(event)
        if not contains:
            return
        print('event contains', self.obj)
        self.press = (*self.obj.get_data(), event.xdata, event.ydata)

    def on_release(self, event):
        """Clear button press information."""
        self.press = None
        self.obj.figure.canvas.draw()

    def on_motion(self, event):
        """Move the rectangle if the mouse is over us."""
        if self.press is None or event.inaxes != self.obj.axes:
            return
        dx = event.xdata - self.press[2]
        dy = event.ydata - self.press[3]
        self.obj.set_xdata(self.press[0] + dx)
        self.obj.set_ydata(self.press[1] + dy)
        self.obj.figure.canvas.draw()

    def connect(self):
        """Connect to all the events we need."""
        self.cidpress = self.obj.figure.canvas.mpl_connect(
            'button_press_event', self.on_press)
        self.cidrelease = self.obj.figure.canvas.mpl_connect(
            'button_release_event', self.on_release)
        self.cidmotion = self.obj.figure.canvas.mpl_connect(
            'motion_notify_event', self.on_motion)


def main():
    parser = argparse.ArgumentParser(description="makes it possible to drag"
                                     "a small curve portion over a curve"
                                     "to inspect similarities")
    parser.add_argument("-i", "--interval", type=int, nargs=2,
                        help="only draw curve in the given interval")
    parser.add_argument("-n", "--varname",
                        help="variable name (only for matlab file)",
                        default="trace")
    parser.add_argument("infile", help="input matlab/numpy file")
    parser.add_argument("patternoffset", help="offset of draggable pattern",
                        type=int, nargs=2)
    args = parser.parse_args()

    trace = load_single_trace(args.infile, args.varname)
    moveable_segment = trace[args.patternoffset[0]:args.patternoffset[1]]

    if args.interval:
        trace = trace[args.interval[0]:args.interval[1]]

    plt.figure()
    plt.plot(trace)
    pattern, = plt.plot(moveable_segment)
    draggable = DraggablePattern(pattern)
    draggable.connect()
    plt.show()


if __name__ == "__main__":
    main()
